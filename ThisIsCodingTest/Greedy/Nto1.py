# 어떠한 수 N이 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행하려고 한다. 단, 두번째 연산은 N이 K로 나누어 떨어질 때만 선택할 수 있다.
#    1. N에서 1을 뺀다.
#    2. N을 K로 나눈다.
# 예를 들어 N이 17, K가 4라고 가정하자. 이때 1번의 과정을 한 번 수행하면 N은 16이 된다. 이후에 2번의 과정을 두 번 수행하면 N은 1이 된다. 결과적으로 이 경우 전체 과정을 실행한 횟수는 3이 된다. 이는 N을 1로 만드는 최소 횟수이다.
# N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구한 프로그램을 작성해라.

# 입력 조건 : 첫째 줄에 N(1 <= N <= 100,000)과 K(2 <= K <= 100,000)가 공백을 기준으로 하여 각각 자연수로 주어진다.
# 출력 조건 : 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.

# 문제 해결 아이디어 : 주어진 N에 대하여 최대한 많이 나누기를 수행

n, k = map(int, input().split())

result = 0

while True:
    # target : N이 K로 나누어떨어지지 않는 경우 K로 나눴을 경우 가장 가까운수가 무엇인지
    target = (n//k)*k
    result += (n - target)
    n = target

    if n < k:
        break

    result += 1
    n //= k

# n-1 : 남은 수에 대해서 얼마나 빼야 1이 되는지
result += (n - 1)
print(result)

